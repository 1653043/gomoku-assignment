{"version":3,"sources":["index.js"],"names":["Square","props","className","highlighted","onClick","value","Board","i","this","squares","squaresToHighlight","indexOf","size","board","x","row","y","push","renderSquare","createBoard","boardSize","React","Component","Game","state","history","Array","fill","currentMove","col","stepNumber","xIsNext","squareCount","numMoves","winner","sortDescending","step","setState","slice","length","currentPlayer","_indexTo2DCoordinates","concat","pos","consecutiveVert","consecutiveHoriz","consecutiveDiag1","consecutiveDiag2","vertSquares","horizSquares","diag1Squares","diag2Squares","_2DCoordinatesToIndex","checkWinConditions","console","log","status","current","moves","reverse","map","move","desc","key","disabled","jumpTo","handleClick","inactiveLabel","activeLabel","onToggle","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.343eb419.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ToggleButton from 'react-toggle-button';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button\n      className={`square ${props.highlighted ? \"square-highlighted\" : \"\"}`}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highlighted={this.props.squaresToHighlight.indexOf(i) !== -1 ? true : false}\n      />\n    );\n  }\n\n  createBoard(size) {\n    let board = [];\n\n    for (let x = 0; x < size; ++x) {\n      let row = [];\n\n      for (let y = 0; y < size; ++y) {\n        row.push(this.renderSquare(x * size + y));\n      }\n\n      board.push(<div className=\"board-row\">{row}</div>)\n    }\n\n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createBoard(this.props.boardSize)}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let boardSize = 20;\n    let squareCount = boardSize * boardSize;\n    this.state = {\n      history: [{\n        squares: Array(squareCount).fill(null),\n        currentMove: {\n          col: null,\n          row: null,\n        },\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      boardSize: boardSize,\n      squareCount: squareCount,\n      numMoves: 0,\n      winner: null,\n      squaresToHighlight: [],\n      sortDescending: false,\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.history[history.length - 1];\n    const squares = current.squares.slice();\n    const currentPlayer = this.state.xIsNext ? 'X' : 'O';\n\n    if (this.state.winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = currentPlayer;\n    const numMoves = this.state.numMoves + 1;\n\n    let [col, row] = _indexTo2DCoordinates(i, this.state.boardSize);\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        currentMove: {\n          col: col,\n          row: row,\n        },\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      numMoves: numMoves,\n    });\n\n    const [winner, squaresToHighlight] = checkWinConditions(squares, i, this.state.boardSize);\n\n    if (winner) {\n      this.setState({\n        winner: winner,\n        squaresToHighlight: squaresToHighlight,\n      });\n    } else if (numMoves >= this.state.squareCount) {\n      this.setState({\n        winner: 'Draw',\n      });\n    }\n  }\n\n  render() {\n    console.log('numMoves', this.state.numMoves);\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.state.winner;\n\n    const sortedHistory =\n      this.state.sortDescending ? \n      this.state.history.slice().reverse() :\n      this.state.history;\n\n    const moves = sortedHistory.map((step, move) => {\n      move = this.state.sortDescending ? this.state.numMoves - move : move;\n      console.log('STEP: ', step);\n      console.log('MOVE: ', move);\n      const desc = move ?\n        'Go to move #' + move + ': (' + step.currentMove.col + ', ' + step.currentMove.row + ')':\n        'Go to game start';\n      return (\n        <li key={move} >\n          <button\n            disabled={!!this.state.winner}\n            onClick={() => this.jumpTo(move)}\n            className={move === this.state.stepNumber ? 'move-selected' : ''}\n          >\n            {desc}\n          </button>\n        </li>\n      )\n    });\n\n    let status;\n    if (winner === 'Draw') {\n      status = 'Draw.'\n    } else if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            boardSize = {this.state.boardSize}\n            squaresToHighlight = {this.state.squaresToHighlight}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n\n          Sort: <ToggleButton\n                  inactiveLabel='▲'\n                  activeLabel='▼'\n                  value={this.state.sortDescending}\n                  onToggle={(value) => {\n                    this.setState({\n                      sortDescending: !value,\n                    })\n                  }} />\n                  \n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction _indexTo2DCoordinates(pos, boardSize) {\n  let x = pos % boardSize;\n  let y = Math.floor(pos / boardSize);\n  return [x, y];\n}\n\nfunction _2DCoordinatesToIndex(x, y, boardSize) {\n  return y * boardSize + x;\n}\n\nfunction checkWinConditions(squares, pos, boardSize) {\n  const currentPlayer = squares[pos];\n\n  let consecutiveVert = 0,\n      consecutiveHoriz = 0,\n      consecutiveDiag1 = 0,\n      consecutiveDiag2 = 0,\n      vertSquares = [],\n      horizSquares = [],\n      diag1Squares = [],\n      diag2Squares = [];\n\n  let [x, y] = _indexTo2DCoordinates(pos, boardSize);\n\n  // Count consecutive vertical moves of the same type\n  while (\n    y >= 0 && // Check for negative out-of-bound (OOB)\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer // Check if current move is of the same type as the base move\n  ) {\n    consecutiveVert++;\n    vertSquares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    y--; // check the square directly above\n  }\n\n  // Reset x, y to base pos, then move them to the square directly below\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  ++y;\n\n  while (\n    y < boardSize && // Check for positive out-of-bound (OOB)\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer // Check if current move is of the same type as the base move\n  ) {\n    consecutiveVert++;\n    vertSquares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    y++; // check the square directly below\n  }\n\n  // Count consecutive horizontal moves of the same type\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  \n  while (\n    x >= 0 && // Check for negative OOB\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer\n  ) {\n    consecutiveHoriz++;\n    horizSquares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    x--; // Check the square directly to the left\n  }\n\n  // Reset x, y to base pos, then move them to the square directly to the right\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  ++x;\n\n  while (\n    x < boardSize && // Check for positive OOB\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer\n  ) {\n    consecutiveHoriz++;\n    horizSquares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    x++; // Check the square directly to the left\n  }\n\n  // Count consecutive Northwest/Southeast diagonal moves of the same type\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  \n  while (\n    x >= 0 && y >= 0 && // Check for negative OOB\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer\n  ) {\n    consecutiveDiag1++;\n    diag1Squares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    x--; y--;// Check the square diagonally to the Northwest\n  }\n\n  // Reset x, y to base pos, then move them to the square diagonally to the Southeast\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  ++x; ++y;\n\n  while (\n    x < boardSize && y < boardSize && // Check for positive OOB\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer\n  ) {\n    consecutiveDiag1++;\n    diag1Squares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    x++; y++; // Check the square directly to the left\n  }\n\n  // Count consecutive Northeast/Southwest diagonal moves of the same type\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  \n  while (\n    x < boardSize && y >= 0 && // Check for negative OOB\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer\n  ) {\n    consecutiveDiag2++;\n    diag2Squares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    x++; y--;// Check the square diagonally to the Northeast\n  }\n\n  // Reset x, y to base pos, then move them to the square diagonally to the Southwest\n  [x, y] = _indexTo2DCoordinates(pos, boardSize);\n  --x; ++y;\n\n  while (\n    x >= 0 && y < boardSize && // Check for positive OOB\n    squares[_2DCoordinatesToIndex(x, y, boardSize)] === currentPlayer\n  ) {\n    consecutiveDiag2++;\n    diag2Squares.push(_2DCoordinatesToIndex(x, y, boardSize));\n    x--; y++; // Check the square directly to the Southwest\n  }\n  \n  let winner = null;\n  let squaresToHighlight = [];\n\n  if (consecutiveDiag1 >= 5) {\n    winner = currentPlayer;\n    squaresToHighlight = squaresToHighlight.concat(diag1Squares);\n  }\n  if (consecutiveDiag2 >= 5) {\n    winner = currentPlayer;\n    squaresToHighlight = squaresToHighlight.concat(diag2Squares);\n  }\n  if (consecutiveHoriz >= 5) {\n    winner = currentPlayer;\n    squaresToHighlight = squaresToHighlight.concat(horizSquares);\n  }\n  if (consecutiveVert >= 5) {\n    winner = currentPlayer;\n    squaresToHighlight = squaresToHighlight.concat(vertSquares);\n  }\n\n  // console.log('Current player: ', currentPlayer);\n  // console.log('Vert: ', consecutiveVert);\n  // console.log('Horiz: ', consecutiveHoriz);\n  // console.log('Diag1: ', consecutiveDiag1);\n  // console.log('Diag2: ', consecutiveDiag2);\n  // console.log('Squares to highlight: ', vertSquares, squaresToHighlight);\n\n  return [winner, squaresToHighlight];\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}